cmake_minimum_required(VERSION 3.13)

# Default to CMAKE_BUILD_TYPE = Release unless overridden on command line
if( DEFINED CMAKE_BUILD_TYPE )
    set( CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Set to either \"Release\" or \"Debug\"" )
else()
    set( CMAKE_BUILD_TYPE Release CACHE STRING "Set to either \"Release\" or \"Debug\"" )
endif()

if(WIN32 AND NOT CMAKE_TOOLCHAIN_FILE)
  message(FATAL_ERROR "CMAKE_TOOLCHAIN_FILE must be set, see vcpkg integrate install")
endif()

# Set project version from git tag
find_package(Python3 COMPONENTS Interpreter)
execute_process(
  COMMAND "${Python3_EXECUTABLE}"
    "${CMAKE_SOURCE_DIR}/tools/CreateVersionFromGitTag.py"
    --output-str "%M.%m.%p"
    --quiet
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  OUTPUT_VARIABLE VERSION_RAW
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
project("yaul" DESCRIPTION "yet another UI library for C++" VERSION ${VERSION_RAW})

# Must use GNUInstallDirs to install libraries into correct
# locations on all platforms.
include(GNUInstallDirs)

# 64 bit only
# if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
#   message("Please switch to a x64 build")
#   return()
# endif()
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(ARCHITECTURE "x64")
else()
  set(ARCHITECTURE "x86")
endif()

# Global setting: Use C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Generate compile commands for clang-tidy
set(CMAKE_EXPORT_COMPILE_COMMANDS on)

if( WIN32 )
  # define UNICODE and_UNICODE definition on Windows
  # Both definitions are required
  add_definitions(-DUNICODE -D_UNICODE)
endif()

# Allow target_sources to use relative paths
cmake_policy(SET CMP0076 NEW)

# Allow install CODE|SCRIPT to use generator expressions
cmake_policy(SET CMP0087 NEW)

# Output binaries to ./bin
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}/output/debug-${ARCHITECTURE}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}/output/release-${ARCHITECTURE}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}/output/debug-${ARCHITECTURE}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}/output/release-${ARCHITECTURE}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}/output/debug-${ARCHITECTURE}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_SOURCE_DIR}/output/release-${ARCHITECTURE}")

include(CTest)

# Targets not included in the public distributable
set (TARGETS_NODIST
  "gtester"       # Unit tester common to all projects
  "installer-win" # Windows self-extracting installer
)

set (TARGETS_NODISTCONFIG
  "default" # gtester
  "default" # installer-win
)

set (TARGETS_NODISTDIR
  "common" # gtester
  "installer-win" # installer-win
)

# Targets included in the public distributable
set (TARGETS_DIST
  "yaul"        # yaul core library
  "entrypoint"  # Application entry point for WinMain glue logic
)

# Executable options: "default", "WinMain"
# Library options: "STATIC", "SHARED", "library" (uses BUILD_SHARED_LIBS)
set (TARGETS_DISTCONFIG
  "library" # yaul
  "STATIC"  # entrypoint
)

set (TARGETS_DISTDIR
  "project-yaul"        # yaul
  "project-entrypoint"  # entrypoint
)

list(APPEND TARGETS ${TARGETS_NODIST})
list(APPEND TARGETS ${TARGETS_DIST})
list(APPEND TARGETS_CONFIG ${TARGETS_NODISTCONFIG})
list(APPEND TARGETS_CONFIG ${TARGETS_DISTCONFIG})
list(APPEND TARGETS_DIR ${TARGETS_NODISTDIR})
list(APPEND TARGETS_DIR ${TARGETS_DISTDIR})

list(LENGTH TARGETS_CONFIG TARGETS_LENGTH)
math(EXPR TARGETS_LENGTH "${TARGETS_LENGTH} - 1")

# Remove existing /W0-4 flag before adding the desired one
string(REGEX REPLACE " /W[0-4]" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
string(REGEX REPLACE " /W[0-4]" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

# Add the suffix "d" to debug builds
set(CMAKE_DEBUG_POSTFIX "d")

# Update semantic version from git tag
# Script executed every time to check for changes
set(VERSION_FILE "${CMAKE_SOURCE_DIR}/common/version.h")
set(VERSION_DEPENDENCY "${VERSION_FILE}.notgenerated")
add_custom_command(
  OUTPUT "${VERSION_DEPENDENCY}"
  BYPRODUCTS "${VERSION_FILE}"
  COMMAND "${Python3_EXECUTABLE}"
    "${CMAKE_SOURCE_DIR}/tools/CreateVersionFromGitTag.py"
    --output "${VERSION_FILE}"
    --quiet
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  COMMENT "Generating version file"
)

foreach(INDEX RANGE ${TARGETS_LENGTH})
  list(GET TARGETS ${INDEX} TARGET)
  list(GET TARGETS_CONFIG ${INDEX} CONFIG)
  list(GET TARGETS_DIR ${INDEX} DIR)

  if (${CONFIG} MATCHES "^library$" OR ${CONFIG} MATCHES "^SHARED$" OR ${CONFIG} MATCHES "^STATIC$")
    if (${CONFIG} MATCHES "^library$")
      add_library(${TARGET} "")
    else()
      add_library(${TARGET} ${CONFIG} "")
    endif()

    get_target_property(TYPE ${TARGET} TYPE)
    if(${TYPE} MATCHES "^SHARED_LIBRARY")
      # Get #define compatible target name
      string(TOUPPER ${TARGET} TARGET_DEFINE)
      string(REPLACE "-" "_" TARGET_DEFINE ${TARGET_DEFINE})

      # Set linking as shared library for all targets
      add_compile_definitions("${TARGET_DEFINE}_LINKED_AS_SHARED_LIBRARY")

      # Override with build shared library for the library target
      target_compile_definitions(${TARGET} PRIVATE "${TARGET_DEFINE}_CREATE_SHARED_LIBRARY")
    endif()
  elseif (${CONFIG} MATCHES "^WinMain$" AND WIN32)
    # Looks for int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, char* args, int nShowCmd)
    add_executable(${TARGET} WIN32)
  elseif(NOT ${TARGET} MATCHES "^.*-win$" OR WIN32)
    # Looks for int main(int argc, char* argv[])
    add_executable(${TARGET})
    if (WIN32)
      target_compile_definitions(${TARGET} PRIVATE WIN_CONSOLE)
    endif()
  else()
    message("Windows only, excluding from all: ${TARGET}")
    add_executable(${TARGET} EXCLUDE_FROM_ALL)
  endif()

  # Add the root as an include directory: i.e. #include "common/logging.hpp" from any level
  target_include_directories(${TARGET} PRIVATE ${CMAKE_SOURCE_DIR} ${DIR})

  # Set debug flag when building debug release, add a suffix to output files
  target_compile_definitions(${TARGET} PUBLIC "$<$<CONFIG:DEBUG>:DEBUG>")
  set_target_properties(${TARGET} PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})

  # Make the version file a dependency so it always gets updated
  target_sources(${TARGET} PRIVATE "${VERSION_DEPENDENCY}")

  # Set compiler options for warnings (treat as errors)
  target_compile_options(${TARGET} PRIVATE
    $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:-Werror>
    $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:-Wall>
    $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:-Wextra>
    $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:-Wconversion>
    $<$<CXX_COMPILER_ID:MSVC>:/WX>
    $<$<CXX_COMPILER_ID:MSVC>:/W4>)

  if (WIN32)
    add_custom_command(TARGET ${TARGET} PRE_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${CMAKE_SOURCE_DIR}/res/" "$<TARGET_FILE_DIR:${TARGET}>/res")
  else()
    add_custom_command(TARGET ${TARGET} PRE_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${CMAKE_SOURCE_DIR}/res/" "$<TARGET_FILE_DIR:${TARGET}>/${PROJECT_NAME}/res")
  endif()

endforeach()

set_target_properties("installer-win" PROPERTIES EXCLUDE_FROM_ALL ON)

# Force rebuild of installer-win every time
# Due to resource file updates not noticed
add_custom_command(TARGET "installer-win" POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E remove_directory
    "${CMAKE_BINARY_DIR}/CMakeFiles/installer-win.dir")

# Generate doxygen when building release type builds
find_package(Doxygen)
add_custom_target(
  "doc"
  COMMAND "${Python3_EXECUTABLE}"
    "${CMAKE_SOURCE_DIR}/tools/UpdateDoxygen.py"
    --doxygen "${DOXYGEN_EXECUTABLE}"
    --doxygen-output "${CMAKE_SOURCE_DIR}/docs/project.doxyfile"
    --project-name "${PROJECT_NAME}"
    --project-brief "${PROJECT_DESCRIPTION}"
    --quiet
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  COMMENT "Generating API documentation with Doxygen"
  DEPENDS "${VERSION_DEPENDENCY}"
)

# Add support for Mingw RC compiler
if(WIN32)
  enable_language(RC)
  include(CMakeDetermineRCCompiler)

  if(MINGW)
    set(CMAKE_RC_COMPILER_INIT windres)
    set(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> <FLAGS> -O coff <DEFINES> -I${CMAKE_CURRENT_BINARY_DIR} -i <SOURCE> -o <OBJECT>")
  endif()
endif()

# Add libraries first to setup library include directives
add_subdirectory("libraries")

# Include public interface (for a library)
include_directories("include")

foreach(DIR ${TARGETS_DIR})
  add_subdirectory("${DIR}")
  target_include_directories("gtester" PRIVATE "${DIR}")
endforeach()

add_test(NAME gtest COMMAND "gtester")

set(EXES "")

option(BUILD_EXAMPLES "Build example applications that use yaul")
if (BUILD_EXAMPLES)
  set(EXAMPLES
    "clock"
    "hello-world"
  )
  add_subdirectory("examples")
  if (WIN32)
    foreach(EXAMPLE ${EXAMPLES})
      set(EXE $<TARGET_FILE:${EXAMPLE}>)
      list(APPEND EXES ${EXE})
    endforeach()
  endif()
endif()

if (WIN32)
  list(LENGTH TARGETS_DISTCONFIG TARGETS_DIST_LENGTH)
  math(EXPR TARGETS_DIST_LENGTH "${TARGETS_DIST_LENGTH} - 1")
  foreach(INDEX RANGE ${TARGETS_DIST_LENGTH})
    list(GET TARGETS_DIST ${INDEX} TARGET)
    list(GET TARGETS_DISTCONFIG ${INDEX} CONFIG)
    if (${CONFIG} MATCHES "^library$" OR ${CONFIG} MATCHES "^SHARED$" OR ${CONFIG} MATCHES "^STATIC$")
      message("Not installing library target on Windows")
    else()
      install(TARGETS ${TARGET}
              RUNTIME DESTINATION .
              LIBRARY DESTINATION lib
              ARCHIVE DESTINATION .)
      set(EXE $<TARGET_FILE:${TARGET}>)
      list(APPEND EXES ${EXE})
    endif()
  endforeach()

  install(DIRECTORY "res" DESTINATION .)
else()
  install(TARGETS ${TARGETS_DIST}
          RUNTIME DESTINATION bin
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib)
  install(DIRECTORY "res" DESTINATION "bin/${PROJECT_NAME}")
endif()

set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})
set(CPACK_PACKAGE_VENDOR "Bradley Davis")
set(CPACK_PACKAGE_CONTACT "Bradley Davis me@bradleydavis.tech")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")

set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "any")
set(CPACK_DEBIAN_PACKAGE_DEPENDS "")

if(WIN32)
  set(CPACK_GENERATOR "ZIP")
  set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)
  set(CPACK_PACKAGE_DIRECTORY "${CMAKE_SOURCE_DIR}")
  set(CPACK_PACKAGE_FILE_NAME "archive")
else()
  set(CPACK_OUTPUT_FILE_PREFIX "${CMAKE_SOURCE_DIR}/output/packages")
endif()

include(CPack)

if (WIN32)
  if(${ARCHITECTURE} STREQUAL "x64")
    set(CPACK_ARCHIVE "${CPACK_PACKAGE_DIRECTORY}/_CPack_Packages/win64/ZIP/archive")
  else()
    set(CPACK_ARCHIVE "${CPACK_PACKAGE_DIRECTORY}/_CPack_Packages/win32/ZIP/archive")
  endif()
  install(CODE
    "file(GET_RUNTIME_DEPENDENCIES
          RESOLVED_DEPENDENCIES_VAR resolved_deps
          UNRESOLVED_DEPENDENCIES_VAR unresolved_deps
          EXECUTABLES ${EXES}
          PRE_EXCLUDE_REGEXES \"api-ms.*\"
          POST_INCLUDE_REGEXES \"${CMAKE_SOURCE_DIR}.*\"
          POST_EXCLUDE_REGEXES \".*\"
          )
    file(COPY \${resolved_deps} DESTINATION \"${CPACK_ARCHIVE}\")
    file(INSTALL \${resolved_deps} DESTINATION \"${CMAKE_INSTALL_PREFIX}\")"
  )
endif()

# CMake targets cannot have spaces, to have spaces in the output use the OUTPUT_NAME property
set_target_properties("installer-win" PROPERTIES OUTPUT_NAME "${PROJECT_NAME}-installer")
file(GENERATE OUTPUT "installerLocation.txt" CONTENT "$<TARGET_FILE:installer-win>")
