name: Windows Build

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - master
    paths-ignore:
      - "**.md"

jobs:
  vs2019-64b:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        EVENT_MATRIX:
          - NONE
          - SHARED_LIBS

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ matrix.os }}-x64-${{ matrix.EVENT_MATRIX }}-v1

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          destination: ${{ runner.workspace }}/ninja

      - name: Add msbuild to PATH
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Prepare vcpkg
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: spdlog:x64-windows gtest:x64-windows
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          # vcpkg version 2020.11.1
          vcpkgGitCommitId: 0bf3923f9fab4001c00f0f429682a0853b5749e0
          vcpkgTriplet: x64-windows

      - name: Build and Test
        shell: powershell
        run: |
          $EVENT_BUILD_PARALLEL=10
          $EVENT_TESTS_PARALLEL=1
          $EVENT_CMAKE_CONFIG="Release"

          if ( "${{ matrix.EVENT_MATRIX }}" -eq "SHARED_LIBS" ) {
            $EVENT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=ON"
          } else {
            $EVENT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=OFF"
          }

          mkdir build -ea 0
          cd build

          $CMAKE_CMD="cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake $EVENT_CMAKE_OPTIONS .."
          function cmake_configure($retry) {
            $errcode=0
            try {
              if ($retry -eq 0) {
                echo "[cmake configure retry] $CMAKE_CMD"
              } else {
                echo "[cmake configure] $CMAKE_CMD"
              }
              Invoke-Expression $CMAKE_CMD
              $errcode=$LastExitCode
            } catch {
              $errcode=1
            } finally {
              if ($errcode -ne 0) {
                if ($retry -eq 0) {
                  $host.SetShouldExit($LastExitCode)
                } else {
                  echo "Remove all entries in build directory"
                  rm -r -fo *
                  cmake_configure 0
                }
              }
            }
          }
          cmake_configure 1

          try {
            cmake --build . --config $EVENT_CMAKE_CONFIG --target all -- -j $EVENT_BUILD_PARALLEL
            if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

            ctest -C $EVENT_CMAKE_CONFIG -T test --output-on-failure -j $EVENT_TESTS_PARALLEL
            if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          } catch {
            $host.SetShouldExit($LastExitCode)
          }

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ${{ matrix.os }}-x64-${{ matrix.EVENT_MATRIX }}
          path: .

  vs2019-32b:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        EVENT_MATRIX:
          - NONE
          - SHARED_LIBS

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ matrix.os }}-x86-${{ matrix.EVENT_MATRIX }}-v1

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          destination: ${{ runner.workspace }}/ninja

      - name: Add msbuild to PATH
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Prepare vcpkg
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: spdlog:x86-windows gtest:x86-windows
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          # vcpkg version 2020.04 to predate spdlog 1.6 when a level 4 warning was introduced
          vcpkgGitCommitId: c7ab9d3110813979a873b2dbac630a9ab79850dc
          vcpkgTriplet: x86-windows

      - name: Build and Test
        shell: powershell
        run: |
          $EVENT_BUILD_PARALLEL=10
          $EVENT_TESTS_PARALLEL=1
          $EVENT_CMAKE_CONFIG="Release"

          if ( "${{ matrix.EVENT_MATRIX }}" -eq "SHARED_LIBS" ) {
            $EVENT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=ON"
          } else {
            $EVENT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=OFF"
          }

          mkdir build -ea 0
          cd build

          $CMAKE_CMD="cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake $EVENT_CMAKE_OPTIONS .."
          function cmake_configure($retry) {
            $errcode=0
            try {
              if ($retry -eq 0) {
                echo "[cmake configure retry] $CMAKE_CMD"
              } else {
                echo "[cmake configure] $CMAKE_CMD"
              }
              Invoke-Expression $CMAKE_CMD
              $errcode=$LastExitCode
            } catch {
              $errcode=1
            } finally {
              if ($errcode -ne 0) {
                if ($retry -eq 0) {
                  $host.SetShouldExit($LastExitCode)
                } else {
                  echo "Remove all entries in build directory"
                  rm -r -fo *
                  cmake_configure 0
                }
              }
            }
          }
          cmake_configure 1

          try {
            cmake --build . --config $EVENT_CMAKE_CONFIG --target all -- -j $EVENT_BUILD_PARALLEL
            if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

            ctest -C $EVENT_CMAKE_CONFIG -T test --output-on-failure -j $EVENT_TESTS_PARALLEL
            if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          } catch {
            $host.SetShouldExit($LastExitCode)
          }

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ${{ matrix.os }}-x86-${{ matrix.EVENT_MATRIX }}
          path: .
