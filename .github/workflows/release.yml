name: Release

on:
  release:
    types: [published]

jobs:
  doxygen:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checkout gh-pages
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: gh-pages
          path: docs/www

      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: build
          key: doxygen-v1

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          destination: ${{ runner.workspace }}/ninja

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libspdlog-dev libgtest-dev libfmt-dev doxygen graphviz
          cd /usr/src/googletest
          sudo cmake .
          sudo cmake --build . --target install

      - name: Build
        shell: bash
        run: |
          mkdir -p build
          cd build

          CMAKE_CMD="cmake -G Ninja .."
          (echo "[cmake configure] $CMAKE_CMD" && $CMAKE_CMD) || (echo "[cmake configure retry]" && rm -rf * && $CMAKE_CMD)

          cmake --build . --target doc

      - name: Commit
        shell: bash
        run: |
          cd docs/www
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Generated Doxygen documentation for release ${{ github.event.release.tag_name }}"
          git push

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: doxygen
          path: .

  windows-release-x64:
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          destination: ${{ runner.workspace }}/ninja

      - name: Add msbuild to PATH
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Prepare vcpkg
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: spdlog:x64-windows gtest:x64-windows
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          # vcpkg version 2020.11.1
          vcpkgGitCommitId: 0bf3923f9fab4001c00f0f429682a0853b5749e0
          vcpkgTriplet: x64-windows

      - name: Build Installer
        shell: powershell
        run: |
          $EVENT_BUILD_PARALLEL=10
          $EVENT_CMAKE_CONFIG="Release"
          $EVENT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=ON"

          mkdir build -ea 0
          cd build

          $CMAKE_CMD="cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake $EVENT_CMAKE_OPTIONS .."
          function cmake_configure($retry) {
            $errcode=0
            try {
              if ($retry -eq 0) {
                echo "[cmake configure retry] $CMAKE_CMD"
              } else {
                echo "[cmake configure] $CMAKE_CMD"
              }
              Invoke-Expression $CMAKE_CMD
              $errcode=$LastExitCode
            } catch {
              $errcode=1
            } finally {
              if ($errcode -ne 0) {
                if ($retry -eq 0) {
                  $host.SetShouldExit($LastExitCode)
                } else {
                  echo "Remove all entries in build directory"
                  rm -r -fo *
                  cmake_configure 0
                }
              }
            }
          }
          cmake_configure 1

          try {
            cmake --build . --config $EVENT_CMAKE_CONFIG --target installer-win -- -j $EVENT_BUILD_PARALLEL
            if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          } catch {
            $host.SetShouldExit($LastExitCode)
          }
          cd ..

          $installer = Get-Content .\build\installerLocation.txt -Raw
          cp "$installer" output\installer.exe

      - name: Upload Windows x64 installer
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output\installer.exe
          asset_name: ${{ github.event.repository.name }}Setup-${{ github.event.release.tag_name }}-win64-x64.exe
          tag: ${{ github.ref }}

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: windows-release-x64
          path: .

  windows-release-x86:
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          destination: ${{ runner.workspace }}/ninja

      - name: Add msbuild to PATH
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Prepare vcpkg
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: spdlog:x86-windows gtest:x86-windows
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          # vcpkg version 2020.04 to predate spdlog 1.6 when a level 4 warning was introduced
          vcpkgGitCommitId: c7ab9d3110813979a873b2dbac630a9ab79850dc
          vcpkgTriplet: x86-windows

      - name: Build Installer
        shell: powershell
        run: |
          $EVENT_BUILD_PARALLEL=10
          $EVENT_CMAKE_CONFIG="Release"
          $EVENT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=ON"

          mkdir build -ea 0
          cd build

          $CMAKE_CMD="cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake $EVENT_CMAKE_OPTIONS .."
          function cmake_configure($retry) {
            $errcode=0
            try {
              if ($retry -eq 0) {
                echo "[cmake configure retry] $CMAKE_CMD"
              } else {
                echo "[cmake configure] $CMAKE_CMD"
              }
              Invoke-Expression $CMAKE_CMD
              $errcode=$LastExitCode
            } catch {
              $errcode=1
            } finally {
              if ($errcode -ne 0) {
                if ($retry -eq 0) {
                  $host.SetShouldExit($LastExitCode)
                } else {
                  echo "Remove all entries in build directory"
                  rm -r -fo *
                  cmake_configure 0
                }
              }
            }
          }
          cmake_configure 1

          try {
            cmake --build . --config $EVENT_CMAKE_CONFIG --target installer-win -- -j $EVENT_BUILD_PARALLEL
            if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
          } catch {
            $host.SetShouldExit($LastExitCode)
          }
          cd ..

          $installer = Get-Content .\build\installerLocation.txt -Raw
          cp "$installer" output\installer.exe

      - name: Upload Windows x86 installer
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output\installer.exe
          asset_name: ${{ github.event.repository.name }}Setup-${{ github.event.release.tag_name }}-win32-x86.exe
          tag: ${{ github.ref }}

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: windows-release-x86
          path: .

  linux:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
        with:
          destination: ${{ runner.workspace }}/ninja

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libspdlog-dev libgtest-dev libfmt-dev
          cd /usr/src/googletest
          sudo cmake .
          sudo cmake --build . --target install

      - name: Build and Test
        shell: bash
        run: |
          EVENT_BUILD_PARALLEL=10
          EVENT_CMAKE_CONFIG="Release"
          EVENT_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=OFF"

          mkdir -p build
          cd build

          CMAKE_CMD="cmake -G Ninja $EVENT_CMAKE_OPTIONS .."
          (echo "[cmake configure] $CMAKE_CMD" && $CMAKE_CMD) || (echo "[cmake configure retry]" && rm -rf * && $CMAKE_CMD)

          cmake --build . --config $EVENT_CMAKE_CONFIG --target package -- -j $EVENT_BUILD_PARALLEL

          cd ..
          mv output/packages/*.sh output/release.sh
          mv output/packages/*.tar.gz output/release.tar.gz

      - name: Upload Linux installer
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output/release.sh
          asset_name: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}-Linux-x64.sh
          tag: ${{ github.ref }}

      - name: Upload Linux archive
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output/release.tar.gz
          asset_name: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}-Linux-x64.tar.gz
          tag: ${{ github.ref }}

      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: linux-release-x64
          path: .